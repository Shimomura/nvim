# Required:
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <silent> <C-e> :NERDTreeToggle<CR>
  "autocmd VimEnter * NERDTree
  autocmd StdinReadPre * let s:std_in=1
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  " 表示幅
  let g:NERDTreeWinSize=40
  " ブックマークを表示
  let g:NERDTreeShowBookmarks=1
  " 親ディレクトリへ移動
  let g:NERDTreeMapUpdir=''
  " ファイルの開き方
  let g:NERDTreeMapOpenSplit='<C-j>'
  let g:NERDTreeMapOpenVSplit='<C-l>'
  " ファイルを開いたらNERDTreeを閉じる
  "let g:NERDTreeQuitOnOpen=1
  " 隠しファイルを表示
  let g:NERDTreeShowHidden=1
  " 非表示ファイル
  "let g:NERDTreeIgnore=['\.git$', '\.clean$', '\.swp$', '\.bak$', '\~$']
  " NERDTreeを同時に閉じる
  autocmd bufenter * if (winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'skanehira/badapple.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {
  \  "_" : {
  \    "outputter/buffer/split" : ":botright 8sp",
  \    "outputter/buffer/close_on_empty" : 1,
  \    "outputter" : "quickfix"
  \  },
  \}
  au FileType qf nnoremap <silent><buffer>q :quit<CR>
'''

[[plugins]]
repo = 'Rican7/php-doc-modded'
on_ft = 'php'
hook_add = '''
  nnoremap <Leader>p :call PhpDocSingle()<CR>:%s/}\s\/\/\sEnd.*/}<CR>
  vnoremap <Leader>p :call PhpDocRange()<CR>:%s/}\s\/\/\sEnd.*/}<CR>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
  let g:airline_theme = 'papercolor'
'''

[[plugins]]
repo = 'thinca/vim-ref'
hook_add = '''
  inoremap <silent><C-k> <C-o>:call<Space>ref#K('normal')<CR><ESC>
  nmap <silent>K <Plug>(ref-keyword)
  let g:ref_no_default_key_mappings = 1
  let g:ref_cache_dir        = $HOME . '/.vim/vim-ref/cache'
  let g:ref_detect_filetype     = {
  \  'php': 'phpmanual'
  \}
  let g:ref_phpmanual_path = $HOME . '/.vim/vim-ref/php-chunked-xhtml'
  let g:ref_use_cache   = 1
  let g:ref_use_vimproc  = 1
'''

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  nnoremap <silent> <leader>t :TlistOpen<CR>
'''

[[plugins]]
repo = 'w0rp/ale'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'Valloric/MatchTagAlways'
hook_add = '''
  "オプション機能ONにする
  let g:mta_use_matchparen_group = 1
  "使用するファイルタイプ(phpを追加)
  let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}
'''

[[plugins]]
repo = 'rking/ag.vim'

[[plugins]]
repo = 'phpactor/phpactor'
on_ft = 'php'
hook_add = '''

  " useの補完
  nmap <silent><Leader>u      :<C-u>call phpactor#UseAdd()<CR>

  " コンテキストメニューの起動(カーソル下のクラスやメンバに対して実行可能な選択肢を表示してくれます)
  nmap <silent><Leader>mm     :<C-u>call phpactor#ContextMenu()<CR>

  " ナビゲーションメニューの起動(クラスの参照元を列挙したり、他ファイルへのジャンプなど)
  nmap <silent><Leader>nn     :<C-u>call phpactor#Navigate()<CR>

  " カーソル下のクラスやメンバの定義元にジャンプ
  nmap <silent><Leader>o      :<C-u>call phpactor#GotoDefinition()<CR>

  " 編集中のクラスに対し各種の変更を加える(コンストラクタ補完、インタフェース実装など)
  nmap <silent><Leader>tt     :<C-u>call phpactor#Transform()<CR>

  " 新しいクラスを生成する(編集中のファイルに)
  nmap <silent><Leader>cc     :<C-u>call phpactor#ClassNew()<CR>

  " 選択した範囲を変数に抽出する
  nmap <silent><Leader>ee     :<C-u>call phpactor#ExtractExpression(v:false)<CR>

  " 選択した範囲を変数に抽出する
  vmap <silent><Leader>ee     :<C-u>call phpactor#ExtractExpression(v:true)<CR>

  " 選択した範囲を新たなメソッドとして抽出する
  vmap <silent><Leader>em     :<C-u>call phpactor#ExtractMethod()<CR>

  " split → jump
  nmap <silent><C-w><Leader>o :<C-u>call DefinitionJumpWithPhpactor()<CR>

  " カーソル下のクラスや変数の情報を表示する
  " 他のエディタで、マウスカーソルをおいたときに表示されるポップアップなどに相当
  vmap <silent><Leader>hh     :<C-u>call phpactor#Hover()<CR>
'''


[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'ujihisa/neco-look'
